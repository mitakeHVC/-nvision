name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      neo4j:
        image: neo4j:5.0
        env:
          NEO4J_AUTH: neo4j/password
          NEO4J_PLUGINS: '["apoc"]'
        ports:
          - 7687:7687
          - 7474:7474
        options: >-
          --health-cmd "cypher-shell -u neo4j -p password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      chroma:
        image: chromadb/chroma:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/api/v1/heartbeat"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black flake8 mypy isort
    
    - name: Wait for services
      run: |
        sleep 30
        curl -f http://localhost:8000/api/v1/heartbeat || exit 1
        echo "Services are ready"
    
    - name: Code formatting check (Black)
      run: |
        black --check --diff src tests
    
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff src tests
    
    - name: Linting (flake8)
      run: |
        flake8 src tests
    
    - name: Type checking (mypy)
      run: |
        mypy src --ignore-missing-imports
    
    - name: Security scan (bandit)
      run: |
        pip install bandit
        bandit -r src -f json -o bandit-report.json || true
    
    - name: Run tests with coverage
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: password
        CHROMA_HOST: localhost
        CHROMA_PORT: 8000
      run: |
        pytest --cov=src --cov-report=xml --cov-report=html --cov-fail-under=85 -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t nvision:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        docker run --rm nvision:${{ github.sha }} python -c "import src; print('Docker build successful')"